import React, { useState, useCallback } from "react";
import { Link } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import {
  Upload,
  FileText,
  Check,
  Loader2,
  BookOpen,
  Sparkles,
  DollarSign,
  Settings,
} from "lucide-react";

interface ProcessingStep {
  id: string;
  label: string;
  status: "pending" | "processing" | "completed";
}

interface BookMetadata {
  title: string;
  description: string;
  authors: string;
  publishYear: string;
  genres: string[];
  publisher: string;
  pages: number;
  isbn: string;
  contentType: string;
  digitalPrice: string;
  digitalQuantity: string;
  physicalPrice: string;
  physicalQuantity: string;
  allowDigitalAccess: boolean;
  allowPhysicalAccess: boolean;
}

const PROCESSING_STEPS: ProcessingStep[] = [
  { id: "upload", label: "ƒêang t·∫£i l√™n file...", status: "pending" },
  { id: "encode", label: "ƒê√£ m√£ h√≥a n·ªôi dung PDF", status: "pending" },
  {
    id: "vectorize",
    label: "ƒêang vector h√≥a to√†n b·ªô n·ªôi dung",
    status: "pending",
  },
  {
    id: "analyze",
    label: "ƒêang ph√¢n t√≠ch n·ªôi dung v√† sinh metadata (AI)",
    status: "pending",
  },
];

const CONTENT_TYPES = [
  "Ch√≠nh tr·ªã",
  "L·ªãch s·ª≠",
  "VƒÉn hÔøΩÔøΩc",
  "K·ªπ nƒÉng",
  "Khoa h·ªçc",
  "Kinh t·∫ø",
  "Gi√°o d·ª•c",
  "Ngh·ªá thu·∫≠t",
];

const SAMPLE_GENRES = [
  "Ti·ªÉu thuy·∫øt",
  "Khoa h·ªçc vi·ªÖn t∆∞·ªüng",
  "L·ªãch s·ª≠",
  "T·ª± truy·ªán",
  "K·ªπ nƒÉng s·ªëng",
  "Kinh doanh",
  "T√¢m l√Ω h·ªçc",
  "Tri·∫øt h·ªçc",
];

export default function Index() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingSteps, setProcessingSteps] =
    useState<ProcessingStep[]>(PROCESSING_STEPS);
  const [showMetadataForm, setShowMetadataForm] = useState(false);
  const [metadata, setMetadata] = useState<BookMetadata>({
    title: "",
    description: "",
    authors: "",
    publishYear: "",
    genres: [],
    publisher: "",
    pages: 0,
    isbn: "",
    contentType: "",
    digitalPrice: "",
    digitalQuantity: "",
    physicalPrice: "",
    physicalQuantity: "",
    allowDigitalAccess: false,
    allowPhysicalAccess: false,
  });

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);

    const files = Array.from(e.dataTransfer.files);
    const pdfFile = files.find((file) => file.type === "application/pdf");

    if (pdfFile) {
      setSelectedFile(pdfFile);
      startProcessing(pdfFile);
    }
  }, []);

  const handleFileSelect = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (file && file.type === "application/pdf") {
        setSelectedFile(file);
        startProcessing(file);
      }
    },
    [],
  );

  const handleDemoUpload = useCallback(() => {
    // Create a mock file for demo purposes
    const mockFile = new File([""], "nghe-thuat-lanh-dao-hien-dai.pdf", {
      type: "application/pdf",
    });
    setSelectedFile(mockFile);
    startProcessing(mockFile);
  }, []);

  const startProcessing = async (file: File) => {
    setIsProcessing(true);
    const steps = [...PROCESSING_STEPS];

    // Reset all steps to pending
    steps.forEach((step) => (step.status = "pending"));
    setProcessingSteps([...steps]);

    // Simulate processing steps with realistic timing
    for (let i = 0; i < steps.length; i++) {
      steps[i].status = "processing";
      setProcessingSteps([...steps]);

      // Different timing for different steps
      const delays = [2000, 3000, 4000, 3500]; // Upload, encode, vectorize, analyze
      await new Promise((resolve) => setTimeout(resolve, delays[i]));

      steps[i].status = "completed";
      setProcessingSteps([...steps]);

      // Small delay between steps
      if (i < steps.length - 1) {
        await new Promise((resolve) => setTimeout(resolve, 500));
      }
    }

    // Simulate AI-generated metadata
    const aiMetadata: BookMetadata = {
      title: "Ngh·ªá Thu·∫≠t L√£nh ƒê·∫°o Hi·ªán ƒê·∫°i",
      description:
        "Cu·ªën s√°ch n√†y cung c·∫•p nh·ªØng ph∆∞∆°ng ph√°p l√£nh ƒë·∫°o ti√™n ti·∫øn, k·∫øt h·ª£p gi·ªØa t√¢m l√Ω h·ªçc v√† qu·∫£n tr·ªã hi·ªán ƒë·∫°i ƒë·ªÉ gi√∫p c√°c nh√† l√£nh ƒë·∫°o ph√°t tri·ªÉn k·ªπ nƒÉng ƒëi·ªÅu h√†nh ƒë·ªôi nh√≥m hi·ªáu qu·∫£.",
      authors: "Nguy·ªÖn VƒÉn A; Tr·∫ßn Th·ªã B",
      publishYear: "2023",
      genres: ["K·ªπ nƒÉng s·ªëng", "Kinh doanh"],
      publisher: "NXB Tri Th·ª©c",
      pages: Math.floor(file.size / 1000), // Estimate based on file size
      isbn: "978-604-916-000-0",
      contentType: "K·ªπ nƒÉng",
      digitalPrice: "150000",
      digitalQuantity: "1000",
      physicalPrice: "280000",
      physicalQuantity: "500",
      allowDigitalAccess: true,
      allowPhysicalAccess: true,
    };

    setMetadata(aiMetadata);
    setIsProcessing(false);

    // Show success message briefly before showing form
    setTimeout(() => {
      setShowMetadataForm(true);
    }, 1000);
  };

  const updateMetadata = (field: keyof BookMetadata, value: any) => {
    setMetadata((prev) => ({ ...prev, [field]: value }));
  };

  const toggleGenre = (genre: string) => {
    setMetadata((prev) => ({
      ...prev,
      genres: prev.genres.includes(genre)
        ? prev.genres.filter((g) => g !== genre)
        : [...prev.genres, genre],
    }));
  };

  const handlePublish = () => {
    console.log("Publishing book with metadata:", metadata);
    alert(
      `‚úÖ S√°ch "${metadata.title}" ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n th√†nh c√¥ng!\n\nS√°ch c·ªßa b·∫°n hi·ªán ƒë√£ c√≥ th·ªÉ ƒë∆∞·ª£c t√¨m th·∫•y tr√™n n·ªÅn t·∫£ng v√† ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ƒë·ªçc v√† t∆∞∆°ng t√°c v·ªõi AI chatbot.`,
    );
    // In real app: navigate to book management or library page
  };

  const handleSaveDraft = () => {
    console.log("Saving draft with metadata:", metadata);
    alert(
      `üíæ S√°ch "${metadata.title}" ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh b·∫£n nh√°p!\n\nB·∫°n c√≥ th·ªÉ quay l·∫°i ch·ªânh s·ª≠a v√† xu·∫•t b·∫£n sau.`,
    );
    // In real app: navigate to drafts management page
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Header */}
      <header className="bg-white/90 backdrop-blur-sm border-b border-blue-100 sticky top-0 z-50">
        <div className="container mx-auto px-4 lg:px-6 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
              <BookOpen className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-gray-900">BookAI</h1>
              <p className="text-sm text-gray-600">
                N·ªÅn t·∫£ng xu·∫•t b·∫£n th√¥ng minh
              </p>
            </div>
          </div>
          <nav className="hidden md:flex items-center gap-6">
            <a
              href="#"
              className="text-gray-600 hover:text-blue-600 transition-colors"
            >
              Th∆∞ vi·ªán
            </a>
            <Link
              to="/reader"
              className="text-gray-600 hover:text-blue-600 transition-colors"
            >
              ƒê·ªçc s√°ch m·∫´u
            </Link>
            <a
              href="#"
              className="text-gray-600 hover:text-blue-600 transition-colors"
            >
              Th·ªëng k√™
            </a>
            <a
              href="#"
              className="text-gray-600 hover:text-blue-600 transition-colors"
            >
              H·ªó tr·ª£
            </a>
          </nav>
        </div>
      </header>

      <main className="container mx-auto px-4 lg:px-6 py-8 max-w-4xl">
        {!selectedFile && (
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              T·∫£i l√™n s√°ch m·ªõi
            </h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              T·∫£i l√™n file PDF c·ªßa b·∫°n v√† ƒë·ªÉ AI t·ª± ƒë·ªông ph√¢n t√≠ch, t·∫°o metadata
              v√† chu·∫©n b·ªã s√°ch cho vi·ªác xu·∫•t b·∫£n tr√™n n·ªÅn t·∫£ng.
            </p>
          </div>
        )}

        {/* File Upload Area */}
        {!selectedFile && (
          <Card className="mb-8 border-2 border-dashed border-blue-200 bg-white/50">
            <CardContent className="p-12">
              <div
                className={`relative border-2 border-dashed rounded-xl p-12 text-center transition-colors ${
                  isDragOver
                    ? "border-blue-500 bg-blue-50"
                    : "border-gray-300 hover:border-blue-400 hover:bg-blue-50/50"
                }`}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
              >
                <Upload className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-700 mb-2">
                  K√©o th·∫£ file PDF v√†o ƒë√¢y
                </h3>
                <p className="text-gray-500 mb-6">ho·∫∑c</p>
                <div className="space-y-4">
                  <Button
                    variant="outline"
                    className="cursor-pointer bg-white hover:bg-blue-50"
                    onClick={() =>
                      document.getElementById("file-upload")?.click()
                    }
                  >
                    <FileText className="w-4 h-4 mr-2" />
                    Ch·ªçn t·ªáp t·ª´ m√°y
                  </Button>
                  <input
                    id="file-upload"
                    type="file"
                    accept=".pdf"
                    className="hidden"
                    onChange={handleFileSelect}
                  />

                  <div className="text-center">
                    <p className="text-sm text-gray-500 mb-2">
                      Ho·∫∑c th·ª≠ nghi·ªám v·ªõi file m·∫´u:
                    </p>
                    <Button
                      variant="default"
                      className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                      onClick={handleDemoUpload}
                    >
                      <Sparkles className="w-4 h-4 mr-2" />
                      Th·ª≠ nghi·ªám v·ªõi file PDF m·∫´u
                    </Button>
                  </div>
                </div>
                <p className="text-sm text-gray-400 mt-4">Ch·ªâ nh·∫≠n file .pdf</p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Processing Steps */}
        {selectedFile && !showMetadataForm && (
          <Card className="mb-8 bg-white/70 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-purple-600" />
                ƒêang x·ª≠ l√Ω: {selectedFile.name}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {processingSteps.map((step, index) => (
                  <div key={step.id} className="flex items-center gap-4">
                    <div
                      className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        step.status === "completed"
                          ? "bg-green-100 text-green-600"
                          : step.status === "processing"
                            ? "bg-blue-100 text-blue-600"
                            : "bg-gray-100 text-gray-400"
                      }`}
                    >
                      {step.status === "completed" ? (
                        <Check className="w-4 h-4" />
                      ) : step.status === "processing" ? (
                        <Loader2 className="w-4 h-4 animate-spin" />
                      ) : (
                        <span className="text-sm font-medium">{index + 1}</span>
                      )}
                    </div>
                    <span
                      className={`${
                        step.status === "completed"
                          ? "text-green-700 font-medium"
                          : step.status === "processing"
                            ? "text-blue-700 font-medium"
                            : "text-gray-500"
                      }`}
                    >
                      {step.label}
                    </span>
                  </div>
                ))}

                {/* Success message when all steps completed */}
                {!isProcessing &&
                  processingSteps.every(
                    (step) => step.status === "completed",
                  ) && (
                    <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                          <Check className="w-4 h-4 text-white" />
                        </div>
                        <div>
                          <p className="text-green-800 font-medium">
                            X·ª≠ l√Ω ho√†n t·∫•t!
                          </p>
                          <p className="text-green-600 text-sm">
                            AI ƒë√£ ph√¢n t√≠ch n·ªôi dung v√† t·∫°o metadata t·ª± ƒë·ªông.
                            ƒêang chu·∫©n b·ªã form ch·ªânh s·ª≠a...
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Metadata Form */}
        {showMetadataForm && (
          <div className="space-y-6">
            <Card className="bg-white/70 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="w-5 h-5 text-purple-600" />
                  Th√¥ng tin s√°ch (ƒë∆∞·ª£c AI t·ª± ƒë·ªông ƒëi·ªÅn)
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="lg:col-span-2">
                    <Label htmlFor="title">Ti√™u ƒë·ªÅ s√°ch *</Label>
                    <Input
                      id="title"
                      value={metadata.title}
                      onChange={(e) => updateMetadata("title", e.target.value)}
                      className="mt-1"
                    />
                  </div>

                  <div className="lg:col-span-2">
                    <Label htmlFor="description">M√¥ t·∫£ chi ti·∫øt</Label>
                    <Textarea
                      id="description"
                      value={metadata.description}
                      onChange={(e) =>
                        updateMetadata("description", e.target.value)
                      }
                      rows={4}
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="authors">T√°c gi·∫£ (ph√¢n c√°ch b·∫±ng ;)</Label>
                    <Input
                      id="authors"
                      value={metadata.authors}
                      onChange={(e) =>
                        updateMetadata("authors", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="publishYear">NƒÉm xu·∫•t b·∫£n</Label>
                    <Input
                      id="publishYear"
                      type="number"
                      value={metadata.publishYear}
                      onChange={(e) =>
                        updateMetadata("publishYear", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="publisher">Nh√† xu·∫•t b·∫£n</Label>
                    <Input
                      id="publisher"
                      value={metadata.publisher}
                      onChange={(e) =>
                        updateMetadata("publisher", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="pages">S·ªë trang</Label>
                    <Input
                      id="pages"
                      type="number"
                      value={metadata.pages}
                      readOnly
                      className="mt-1 bg-gray-50"
                    />
                  </div>

                  <div>
                    <Label htmlFor="isbn">ISBN (t√πy ch·ªçn)</Label>
                    <Input
                      id="isbn"
                      value={metadata.isbn}
                      onChange={(e) => updateMetadata("isbn", e.target.value)}
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="contentType">Lo·∫°i n·ªôi dung</Label>
                    <Select
                      value={metadata.contentType}
                      onValueChange={(value) =>
                        updateMetadata("contentType", value)
                      }
                    >
                      <SelectTrigger className="mt-1">
                        <SelectValue placeholder="Ch·ªçn lo·∫°i n·ªôi dung" />
                      </SelectTrigger>
                      <SelectContent>
                        {CONTENT_TYPES.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="lg:col-span-2">
                    <Label>Th·ªÉ lo·∫°i / Tag</Label>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {SAMPLE_GENRES.map((genre) => (
                        <Badge
                          key={genre}
                          variant={
                            metadata.genres.includes(genre)
                              ? "default"
                              : "outline"
                          }
                          className="cursor-pointer"
                          onClick={() => toggleGenre(genre)}
                        >
                          {genre}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Business Information */}
            <Card className="bg-white/70 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <DollarSign className="w-5 h-5 text-green-600" />
                  Th√¥ng tin kinh doanh
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="digitalPrice">Gi√° s√°ch ƒëi·ªán t·ª≠ (VNƒê)</Label>
                    <Input
                      id="digitalPrice"
                      type="number"
                      value={metadata.digitalPrice}
                      onChange={(e) =>
                        updateMetadata("digitalPrice", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="digitalQuantity">
                      S·ªë l∆∞·ª£ng s√°ch ƒëi·ªán t·ª≠
                    </Label>
                    <Input
                      id="digitalQuantity"
                      type="number"
                      value={metadata.digitalQuantity}
                      onChange={(e) =>
                        updateMetadata("digitalQuantity", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="physicalPrice">Gi√° s√°ch gi·∫•y (VNƒê)</Label>
                    <Input
                      id="physicalPrice"
                      type="number"
                      value={metadata.physicalPrice}
                      onChange={(e) =>
                        updateMetadata("physicalPrice", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="physicalQuantity">S·ªë l∆∞·ª£ng s√°ch gi·∫•y</Label>
                    <Input
                      id="physicalQuantity"
                      type="number"
                      value={metadata.physicalQuantity}
                      onChange={(e) =>
                        updateMetadata("physicalQuantity", e.target.value)
                      }
                      className="mt-1"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="allowDigital"
                      checked={metadata.allowDigitalAccess}
                      onCheckedChange={(checked) =>
                        updateMetadata("allowDigitalAccess", checked)
                      }
                    />
                    <Label htmlFor="allowDigital">
                      Cho ph√©p khai th√°c s√°ch ƒëi·ªán t·ª≠
                    </Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="allowPhysical"
                      checked={metadata.allowPhysicalAccess}
                      onCheckedChange={(checked) =>
                        updateMetadata("allowPhysicalAccess", checked)
                      }
                    />
                    <Label htmlFor="allowPhysical">
                      Cho ph√©p khai th√°c s√°ch gi·∫•y
                    </Label>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-between">
              <Button
                variant="ghost"
                onClick={() => {
                  setSelectedFile(null);
                  setShowMetadataForm(false);
                  setProcessingSteps(PROCESSING_STEPS);
                  setIsProcessing(false);
                }}
                className="text-gray-600 hover:text-gray-800"
              >
                ‚Üê T·∫£i file kh√°c
              </Button>

              <div className="flex gap-4">
                <Button
                  variant="outline"
                  onClick={handleSaveDraft}
                  className="px-8"
                >
                  L∆∞u b·∫£n nh√°p
                </Button>
                <Button
                  onClick={handlePublish}
                  className="px-8 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                >
                  Xu·∫•t b·∫£n
                </Button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}
